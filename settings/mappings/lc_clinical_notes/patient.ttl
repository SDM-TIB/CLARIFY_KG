@prefix rr: <http://www.w3.org/ns/r2rml#> .
@prefix rml: <http://semweb.mmlab.be/ns/rml#> .
@prefix ql: <http://semweb.mmlab.be/ns/ql#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix schema: <http://schema.org/> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix fnml: <http://semweb.mmlab.be/ns/fnml#> .
@prefix fno: <https://w3id.org/function/ontology#> .
@prefix clarifyFun: <http://clarify2020.eu/function/> .
@prefix prov: <http://www.w3.org/ns/prov#> .
@prefix clarify: <http://clarify2020.eu/vocab/> .

<LCPatient>
	rml:logicalSource [ rml:source "/mnt/e/data/data/lc_clinical_notes/patient.csv";
						rml:referenceFormulation ql:CSV;
						];
	rr:subjectMap [
		rr:template "http://clarify2020.eu/LCPatient/{EHR}";
		rr:class clarify:LCPatient
	];
	rr:predicateObjectMap [
		rr:predicate clarify:hasCurrentCancerType;
		rr:objectMap [
			rr:parentTriplesMap <CancerType>
		]
	];
	rr:predicateObjectMap [
		rr:predicate clarify:hasSex;
		rr:objectMap [
			rr:parentTriplesMap <Sex>
		]
	];
	rr:predicateObjectMap [
		rr:predicate clarify:hasRace;
		rr:objectMap [
			rr:parentTriplesMap <Race>
		]
	];	
	rr:predicateObjectMap [
		rr:predicate clarify:birthDate;
		rr:objectMap [
			rml:reference "birthDate";
			rr:datatype xsd:date;

		]
	];
	rr:predicateObjectMap [
		rr:predicate clarify:locatedInCity;
		rr:objectMap [
			rr:parentTriplesMap <City>
		]
	];
	rr:predicateObjectMap [
		rr:predicate clarify:locatedInHospital;
		rr:objectMap [
			rr:parentTriplesMap <Hospital>
		]
	].

<CancerType>
	rml:logicalSource [ rml:source "/mnt/e/data/data/lc_clinical_notes/patient.csv";
						rml:referenceFormulation ql:CSV;
						];
	rr:subjectMap <CancerType_Function>
	rr:termType rr:IRI;

	rr:predicateObjectMap [
		rr:predicate rdf:type;
		rr:objectMap [
			rr:template "http://clarify2020.eu/vocab/CancerType";		
		]
	];
	rr:predicateObjectMap [
		rr:predicate clarify:hasOriginalValue;
		rr:objectMap [
			rml:reference "type_patient";		
		]
	].

<Sex>
	rml:logicalSource [ rml:source "/mnt/e/data/data/lc_clinical_notes/patient.csv";
						rml:referenceFormulation ql:CSV;
						];
	rr:subjectMap <Sex_Function>
	rr:termType rr:IRI;

	rr:predicateObjectMap [
		rr:predicate rdf:type;
		rr:objectMap [
			rr:template "http://clarify2020.eu/vocab/Sex";		
		]
	];
	rr:predicateObjectMap [
		rr:predicate clarify:hasOriginalValue;
		rr:objectMap [
			rml:reference "gender";		
		]
	].

<Race>
	rml:logicalSource [ rml:source "/mnt/e/data/data/lc_clinical_notes/patient.csv";
						rml:referenceFormulation ql:CSV;
						];
	rr:subjectMap <Race_Function>
	rr:termType rr:IRI;

	rr:predicateObjectMap [
		rr:predicate rdf:type;
		rr:objectMap [
			rr:template "http://clarify2020.eu/vocab/Race";		
		]
	];
	rr:predicateObjectMap [
		rr:predicate clarify:hasOriginalValue;
		rr:objectMap [
			rml:reference "race";		
		]
	].

<City>
	rml:logicalSource [ rml:source "/mnt/e/data/data/lc_clinical_notes/patient.csv";
						rml:referenceFormulation ql:CSV;
						];
	rr:subjectMap [
		rr:template "http://clarify2020.eu/City/{cityID}";
		rr:class clarify:City;
	].

<Hospital>
	rml:logicalSource [ rml:source "/mnt/e/data/data/lc_clinical_notes/patient.csv";
						rml:referenceFormulation ql:CSV;
						];
	rr:subjectMap [
		rr:template "http://clarify2020.eu/Hospital/{hospitalID}";
		rr:class clarify:Hospital;
	].

#######################################
############## Functions ##############
#######################################

<CancerType_Function>
    fnml:functionValue [
        rml:logicalSource [ rml:source "/mnt/e/data/data/lc_clinical_notes/patient.csv";
        rml:referenceFormulation ql:CSV 
                            ];
        rr:predicateObjectMap [
            rr:predicate fno:executes ;
            rr:objectMap [ 
                rr:constant clarifyFun:findSemantic 
            ]
        ];   
        rr:predicateObjectMap [
            rr:predicate clarifyFun:tableName;
            rr:objectMap [ 
                rr:constant "patient" 
            ]
        ];
        rr:predicateObjectMap [
            rr:predicate clarifyFun:columnName;
            rr:objectMap [ 
                rr:constant "type_patient" 
            ]
        ];
        rr:predicateObjectMap [
            rr:predicate clarifyFun:resource;
            rr:objectMap [ 
                rr:constant "http://clarify2020.eu/CancerType" 
            ]
        ];   
        rr:predicateObjectMap [
            rr:predicate clarifyFun:columnValue;
            rr:objectMap [ 
                rml:reference "type_patient" 
            ]
        ];                         
    ].			

<Sex_Function>
    fnml:functionValue [
        rml:logicalSource [ rml:source "/mnt/e/data/data/lc_clinical_notes/patient.csv";
        rml:referenceFormulation ql:CSV 
                            ];
        rr:predicateObjectMap [
            rr:predicate fno:executes ;
            rr:objectMap [ 
                rr:constant clarifyFun:findSemantic 
            ]
        ];   
        rr:predicateObjectMap [
            rr:predicate clarifyFun:tableName;
            rr:objectMap [ 
                rr:constant "patient" 
            ]
        ];
        rr:predicateObjectMap [
            rr:predicate clarifyFun:columnName;
            rr:objectMap [ 
                rr:constant "gender" 
            ]
        ];
        rr:predicateObjectMap [
            rr:predicate clarifyFun:resource;
            rr:objectMap [ 
                rr:constant "http://clarify2020.eu/Sex" 
            ]
        ];   
        rr:predicateObjectMap [
            rr:predicate clarifyFun:columnValue;
            rr:objectMap [ 
                rml:reference "gender" 
            ]
        ];                         
    ].	

<Race_Function>
    fnml:functionValue [
        rml:logicalSource [ rml:source "/mnt/e/data/data/lc_clinical_notes/patient.csv";
        rml:referenceFormulation ql:CSV 
                            ];
        rr:predicateObjectMap [
            rr:predicate fno:executes ;
            rr:objectMap [ 
                rr:constant clarifyFun:findSemantic 
            ]
        ];   
        rr:predicateObjectMap [
            rr:predicate clarifyFun:tableName;
            rr:objectMap [ 
                rr:constant "patient" 
            ]
        ];
        rr:predicateObjectMap [
            rr:predicate clarifyFun:columnName;
            rr:objectMap [ 
                rr:constant "race" 
            ]
        ];
        rr:predicateObjectMap [
            rr:predicate clarifyFun:resource;
            rr:objectMap [ 
                rr:constant "http://clarify2020.eu/Race" 
            ]
        ];   
        rr:predicateObjectMap [
            rr:predicate clarifyFun:columnValue;
            rr:objectMap [ 
                rml:reference "race" 
            ]
        ];                         
    ].	